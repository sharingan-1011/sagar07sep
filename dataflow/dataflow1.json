{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "input",
						"type": "DatasetReference"
					},
					"name": "moviedatasource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Year20072009"
				},
				{
					"name": "ComedyGenreOnly"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Film as string,",
				"          Genre as string,",
				"          {Lead Studio} as string,",
				"          {Audience score %} as string,",
				"          Profitability as string,",
				"          {Rotten Tomatoes %} as string,",
				"          {Worldwide Gross} as string,",
				"          Year as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> moviedatasource",
				"moviedatasource filter(toInteger(Year) >= 2007 && toInteger(Year) <= 2009) ~> Year20072009",
				"Year20072009 filter(toString(Genre) == \"Comedy\") ~> ComedyGenreOnly",
				"ComedyGenreOnly select(mapColumn(",
				"          Film,",
				"          Genre,",
				"          {Lead Studio},",
				"          {Rotten Tomatoes %},",
				"          {Worldwide Gross},",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"moviedatasource filter(toInteger({Rotten Tomatoes %}) >= 60 && toInteger({Rotten Tomatoes %}) <= 45) ~> filter1",
				"filter1 filter(toFloat((replace({Worldwide Gross},'$',''))) >= 100.0) ~> filter2",
				"filter2, select1 union(byName: true)~> union1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}